import sys
import json
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton,
    QFileDialog, QProgressBar, QMessageBox,
    QHBoxLayout, QVBoxLayout, QListWidget, QListWidgetItem
)
import plotly.graph_objects as go
import webbrowser
from yt_dlp import YoutubeDL


def convert_cookie_line_to_netscape(line):
    # 쿠키 라인: 이름\t값\t도메인\t경로\t만료\t길이\t기타...
    parts = line.strip().split('\t')
    if len(parts) < 7:
        return None
    name, value, domain, path, expires, length, *rest = parts
    # 도메인에 앞에 '.' 붙여야 함, 만료일을 unix timestamp로 변환 필요
    if not domain.startswith('.'):
        domain = '.' + domain.lstrip('.')
    # 만료일이 ISO8601일 경우 변환 (간단히 timestamp 못쓰면 0으로)
    try:
        import datetime
        dt = datetime.datetime.fromisoformat(expires.replace('Z', '+00:00'))
        expires_ts = int(dt.timestamp())
    except Exception:
        expires_ts = 0

    # Netscape 포맷: 도메인\t포함여부\t경로\t보안여부\t만료\t이름\t값
    # 포함여부: 도메인이 '.'로 시작하면 TRUE
    include_subdomains = 'TRUE' if domain.startswith('.') else 'FALSE'
    secure_flag = 'TRUE' if '✓' in rest else 'FALSE'  # 간단 체크, 정확하지 않을 수 있음

    return f"{domain}\t{include_subdomains}\t{path}\t{secure_flag}\t{expires_ts}\t{name}\t{value}"


def convert_and_save_cookies_netscape(input_txt_path, output_path='cookies_netscape.txt'):
    try:
        with open(input_txt_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        converted = []
        for line in lines:
            if not line.strip() or line.strip().startswith('#'):
                continue
            conv_line = convert_cookie_line_to_netscape(line)
            if conv_line:
                converted.append(conv_line)

        # Netscape cookie header
        header = "# Netscape HTTP Cookie File\n# This file was generated by convert_and_save_cookies_netscape\n\n"
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(header)
            f.write('\n'.join(converted))

        return output_path
    except Exception as e:
        print(f"[ERROR] 쿠키 변환 실패: {e}")
        return None


def fetch_video_length_with_cookiefile(url, cookie_file_path):
    ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'noplaylist': True,
        'skip_download': True,
        'cookiefile': cookie_file_path,
    }
    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            duration = info.get('duration', 0)
            return duration or 0
    except Exception as e:
        print(f"[ERROR] 영상 길이 조회 실패: {url} | 에러: {e}")
        return 0


class YoutubeWatchTimeApp(QWidget):
    def __init__(self):
        super().__init__()
        self.json_path = ''
        self.cookie_files = []  # 쿠키파일 경로 리스트
        self.urls = []
        self.initUI()

    def initUI(self):
        self.setWindowTitle('YouTube 시청시간 계산기 - 다중 쿠키 병렬 처리')
        self.setGeometry(300, 300, 800, 400)

        # JSON 파일 선택
        self.btn_browse_json = QPushButton("JSON 파일 선택")
        self.btn_browse_json.clicked.connect(self.browse_json_file)
        self.lbl_json_file = QLabel("선택된 JSON 파일 없음")

        # 쿠키 텍스트 파일 다중 선택
        self.btn_browse_cookies = QPushButton("쿠키 텍스트 파일 선택 (여러개 가능)")
        self.btn_browse_cookies.clicked.connect(self.browse_cookies_files)
        self.list_cookies = QListWidget()

        # 총 시청시간 계산 버튼
        self.btn_calc = QPushButton("총 시청시간 계산")
        self.btn_calc.clicked.connect(self.calc_total_time)
        self.btn_calc.setEnabled(False)

        # 진행률 표시바 및 결과 출력 라벨
        self.progress = QProgressBar()
        self.progress.setValue(0)
        self.progress.hide()
        self.lbl_result = QLabel('')
        self.lbl_result.setWordWrap(True)

        # 레이아웃 구성
        layout_json = QHBoxLayout()
        layout_json.addWidget(self.btn_browse_json)
        layout_json.addWidget(self.lbl_json_file)

        layout_cookies = QVBoxLayout()
        layout_cookies.addWidget(self.btn_browse_cookies)
        layout_cookies.addWidget(self.list_cookies)

        layout_main = QVBoxLayout()
        layout_main.addLayout(layout_json)
        layout_main.addLayout(layout_cookies)
        layout_main.addWidget(self.btn_calc)
        layout_main.addWidget(self.progress)
        layout_main.addWidget(self.lbl_result)

        self.setLayout(layout_main)
        self.show()

    def browse_json_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "JSON 파일 선택", "", "JSON Files (*.json)")
        if file_path:
            self.json_path = file_path
            self.lbl_json_file.setText(file_path.split('/')[-1])
            self.lbl_result.setText('')
            self.check_ready()

    def browse_cookies_files(self):
        files, _ = QFileDialog.getOpenFileNames(self, "쿠키 텍스트 파일 선택", "", "Text Files (*.txt)")
        if files:
            self.cookie_files.clear()
            self.list_cookies.clear()
            for fpath in files:
                # 변환된 netscape cookie 파일을 임시로 저장 (기존 이름 + _netscape.txt)
                out_path = fpath.rsplit('.', 1)[0] + '_netscape.txt'
                converted_path = convert_and_save_cookies_netscape(fpath, out_path)
                if converted_path:
                    self.cookie_files.append(converted_path)
                    self.list_cookies.addItem(QListWidgetItem(converted_path.split('/')[-1]))
                else:
                    self.list_cookies.addItem(QListWidgetItem(f"변환 실패: {fpath.split('/')[-1]}"))
            self.lbl_result.setText(f"총 {len(self.cookie_files)}개 쿠키파일 변환 완료")
            self.check_ready()

    def check_ready(self):
        if self.json_path and len(self.cookie_files) > 0:
            self.btn_calc.setEnabled(True)
        else:
            self.btn_calc.setEnabled(False)

    def calc_total_time(self):
        if not self.json_path:
            self.lbl_result.setText("먼저 JSON 파일을 선택하세요.")
            return
        if not self.cookie_files:
            self.lbl_result.setText("먼저 쿠키 텍스트 파일을 선택하세요.")
            return

        try:
            with open(self.json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except Exception as e:
            self.lbl_result.setText(f"JSON 파일 로드 실패: {e}")
            return

        filtered_entries = [
            e for e in data if not any(d.get("name", "") == "출처: Google 광고" for d in e.get("details", []))
        ]

        urls = []
        for entry in filtered_entries:
            url_raw = entry.get("titleUrl", "")
            url = url_raw.replace("\\u003d", "=").replace("\u003d", "=").strip()
            if url.startswith("https://www.youtube.com/watch?v=") or url.startswith("https://youtu.be/"):
                urls.append(url)
        urls = list(set(urls))
        total_urls = len(urls)
        if total_urls == 0:
            self.lbl_result.setText("유효한 유튜브 영상 URL이 없습니다.")
            return

        self.progress.setValue(0)
        self.progress.show()

        total_short = 0
        total_long = 0
        processed_count = 0

        start_time = time.time()

        # 쿠키 파일 별로 병렬 처리
        def worker(url, cookie_file):
            return fetch_video_length_with_cookiefile(url, cookie_file)

        # 각 url 별로 어떤 쿠키 파일을 쓸지 순서대로 할당 (round-robin)
        tasks = []
        for i, url in enumerate(urls):
            cookie_file = self.cookie_files[i % len(self.cookie_files)]
            tasks.append((url, cookie_file))

        # max_workers 를 기존의 3배에서 6배로 2배 증가시켜 처리 속도 향상
        with ThreadPoolExecutor(max_workers=len(self.cookie_files) * 6) as executor:
            futures = {executor.submit(worker, url, cfile): (url, cfile) for url, cfile in tasks}

            for future in as_completed(futures):
                length = 0
                url, cfile = futures[future]
                try:
                    length = future.result()
                except Exception as e:
                    print(f"[ERROR] 영상 길이 조회 실패: {url} | 에러: {e}")

                if 0 < length < 180:
                    total_short += length
                elif length >= 180:
                    total_long += length

                processed_count += 1
                progress_pct = int(processed_count / total_urls * 100)

                elapsed = time.time() - start_time
                avg_speed = processed_count / elapsed if elapsed > 0 else 0

                self.progress.setValue(progress_pct)
                self.lbl_result.setText(
                    f"[{processed_count}/{total_urls}] {progress_pct}% 진행 중...\n"
                    f"3분 미만 누적: {total_short}초, 3분 이상 누적: {total_long}초\n"
                    f"평균 처리 속도: {avg_speed:.2f}개/초"
                )
                QApplication.processEvents()

        def sec_to_hms(s):
            h, s = divmod(s, 3600)
            m, s = divmod(s, 60)
            return h, m, s

        short_h, short_m, short_s = sec_to_hms(total_short)
        long_h, long_m, long_s = sec_to_hms(total_long)
        total_h, total_m, total_s = sec_to_hms(total_short + total_long)

        final_msg = (
            f"3분 미만 영상 누적 시청시간: {short_h}시간 {short_m}분 {short_s}초\n"
            f"3분 이상 영상 누적 시청시간: {long_h}시간 {long_m}분 {long_s}초\n"
            f"전체 누적 시청시간: {total_h}시간 {total_m}분 {total_s}초"
        )
        self.lbl_result.setText(final_msg)
        self.progress.hide()

        labels = ['3분 미만', '3분 이상']
        values = [total_short, total_long]
        colors = ['#FFA07A', '#20B2AA']

        fig = go.Figure(data=[go.Pie(
            labels=labels,
            values=values,
            hole=0.5,
            marker_colors=colors,
            hoverinfo="label+percent+value",
            textinfo='label+percent'
        )])

        fig.update_layout(
            title_text="숏폼(3분 미만) vs 롱폼(3분 이상) 누적 시청시간 비율",
            annotations=[dict(text='시간 비율', x=0.5, y=0.5, font_size=20, showarrow=False)]
        )

        extra_html = f"""
        <div style="text-align:center; font-size:16px; margin-top:20px;">
            <p>숏폼(3분 미만) 영상 누적 시청시간: {short_h}시간 {short_m}분 {short_s}초</p>
            <p>롱폼(3분 이상) 영상 누적 시청시간: {long_h}시간 {long_m}분 {long_s}초</p>
            <p>전체 누적 시청시간: {total_h}시간 {total_m}분 {total_s}초</p>
        </div>
        """

        html_str = fig.to_html(full_html=False, include_plotlyjs='cdn')
        html_str = f"<html><body>{html_str}{extra_html}</body></html>"

        with open("output_chart.html", "w", encoding="utf-8") as f:
            f.write(html_str)

        webbrowser.open("output_chart.html")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = YoutubeWatchTimeApp()
    sys.exit(app.exec_())
